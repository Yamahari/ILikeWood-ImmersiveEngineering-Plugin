buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.16.5-6.2.2.0'
group = 'yamahari.ilikewoodximmersiveengineering' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ilikewoodximmersiveengineering'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

repositories {
    flatDir {
        dir 'build/libs'
    }
}

processResources {
    copy {
        from ('src/generated/resources') {
            exclude 'assets/ilikewood/lang'
        }
        into 'src/main/resources'
    }
    copy {
        from 'src/generated/resources/assets/ilikewood/lang'
        into 'src/main/resources/assets/ilikewoodximmersiveengineering/lang'
    }
}

configurations {
    ilikewood
    runtimeOnly.extendsFrom(ilikewood)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'

    compileOnly fg.deobf('build.libs:ilikewood:1.16.5-6.2.2.0:api')

    ilikewood fg.deobf('build.libs:ilikewood:1.16.5-6.2.2.0')
    runtimeOnly fg.deobf('build.libs:ImmersiveEngineering:1.16.5-4.2.4-134')
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                ilikewoodximmersiveengineering {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                ilikewoodximmersiveengineering {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'ilikewood.datagen.modid', 'immersiveengineering'
            property 'mixin.env.disableRefMap', 'true'
            args '--mod', 'ilikewood',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', configurations.ilikewood.asPath

            mods {
                ilikewoodximmersiveengineering {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    sourceSets.main.resources {
        exclude 'assets/immersiveengineering/**'
    }
    manifest {
        attributes([
                "Specification-Title": "ilikewoodximmersiveengineering",
                "Specification-Vendor": "yamahari",
                "Specification-Version": "1.16.5-6.2.2.0",
                "Implementation-Title": "ilikewoodximmersiveengineering",
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"yamahari",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
